================================================================================
CROSS.JL vs KORE IMPLEMENTATION COMPARISON
================================================================================
Date: October 26, 2025
Status: COMPREHENSIVE ANALYSIS COMPLETE

================================================================================
CRITICAL FINDINGS
================================================================================

1. MODE SELECTION BUG (SEVERITY: CRITICAL)
   Location: src/SparseOperator.jl:240-260, function compute_l_modes()
   Issue: For m=0 cases, Cross.jl excludes l=0 (invalid) but also misses l=lmax+1
   Impact: Reduced spectral accuracy for axially symmetric (m=0) flows
   
   Example (m=0, lmax=10, symm=1):
   - Kore (CORRECT):   top=[2,4,6,8,10], bot=[1,3,5,7,9,11]
   - Cross.jl (WRONG): top=[0,2,4,6,8,10], bot=[1,3,5,7,9]
   
   Fix Required: YES - implement mode selection matching Kore's algorithm

================================================================================
CORRECT IMPLEMENTATIONS
================================================================================

All other major components correctly implement Kore physics:

1. HEATING OPERATORS (100% MATCH)
   - Theta (temperature) time derivative: ✓
   - Thermal diffusion: ✓
   - Thermal advection: ✓
   Status: IDENTICAL implementations

2. BOUNDARY CONDITIONS (LOGICALLY EQUIVALENT)
   - Poloidal velocity (no-slip, stress-free): ✓
   - Toroidal velocity (no-slip, stress-free): ✓
   - Temperature (fixed T, fixed flux): ✓
   Status: Different methods (tau vs explicit) but same physics

3. MATRIX OPERATORS (100% MATCH)
   - B matrix (time derivatives): ✓
   - Coriolis force (diagonal): ✓
   - Coriolis coupling (off-diagonal): ✓
   - Viscous diffusion: ✓
   - Buoyancy force: ✓
   - Thermal coupling: ✓
   Status: IDENTICAL implementations

4. VELOCITY COUPLING (100% MATCH)
   - u → v Coriolis coupling: ✓
   - v → u Coriolis coupling: ✓
   Status: Bidirectional coupling correct

5. SYMMETRY CONSTRAINTS (LOGICALLY EQUIVALENT)
   - Equatorial symmetry handling: ✓
   - Mode parity selection: ✓
   Status: Different algorithms but equivalent results for m≠0

================================================================================
DETAILED ANALYSIS LOCATIONS
================================================================================

For full technical details, see: COMPREHENSIVE_COMPARISON_REPORT.md

Key sections:
- Section 1: MODE SELECTION ANALYSIS (explains the bug in detail)
- Section 2: HEATING IMPLEMENTATION (all correct)
- Section 3: BOUNDARY CONDITIONS (equivalent physics)
- Section 4: MATRIX CONSTRUCTION (identical operators)
- Section 5: NUMERICAL PARAMETERS (reasonable choices)
- Section 6: CORIOLIS COUPLING (bidirectional, correct)
- Section 7: SYMMETRY CONSTRAINTS (applied correctly)

================================================================================
CROSS-REFERENCE TABLE
================================================================================

KORE REFERENCE             → CROSS.JL LOCATION
──────────────────────────────────────────────────
bin/utils.py:174-183       → src/SparseOperator.jl:240-260
  (ell function)             (compute_l_modes)

bin/operators.py:699-770   → src/SparseOperator.jl:504-562
  (heating operators)        (operator_theta, etc.)

bin/assemble.py:1188-1340  → src/SparseOperator.jl:816-921
  (boundary conditions)       (apply_sparse_boundary_conditions!)

bin/assemble.py:429-812    → src/SparseOperator.jl:578-800
  (matrix assembly)          (assemble_sparse_matrices)

bin/operators.py:48-124    → src/SparseOperator.jl:311-425
  (Coriolis coupling)        (operator_coriolis_*)

================================================================================
RECOMMENDATIONS
================================================================================

URGENT ACTION REQUIRED:
1. Fix compute_l_modes() for m=0 case to match Kore's algorithm
   - Currently breaks all axially symmetric (m=0) problems
   - Affects accuracy of spectral expansion
   - Simple fix: implement Kore's np.sign(m) logic

OPTIONAL IMPROVEMENTS:
2. Add code comments referencing corresponding Kore line numbers
   - Helps future maintenance and verification
   - Cross.jl already has some Kore comments (good practice)

3. Consider test suite for m=0 cases to prevent regression

================================================================================
TESTING RECOMMENDATIONS
================================================================================

To validate the fix and ensure correctness:

1. Test m=0, lmax=10, symm=±1 mode selection
   Verify modes match Kore output exactly

2. Run physical benchmark comparisons for m=0 convection
   Compare Rayleigh number predictions with Kore

3. Validate higher lmax values (20, 30) still match Kore

4. Test antisymmetric (symm=-1) cases for m=0

================================================================================
